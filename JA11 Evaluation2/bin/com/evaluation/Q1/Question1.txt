Question1-
Answer-(a)
       The String is immutable in Java because of the security, synchronization and class loading. 
       In object-oriented programming, the immutable string or objects that cannot be modified once it is created. But we can only change
       the reference to the object. We restrict to change the object itself.
       
       Since String obj is immutable , we can not modify an existing obj, each modification
       will return a new obj, but if we want to get mutability, then we should use
       StringBuffer or StringBuilder classes.
       
       Difference between String and String Builder-
       they are different to each others in many aspects
       1. Mutability
          A String is immutable in Java, while a StringBuilder is mutable in Java. An immutable object is an object 
          whose content cannot be changed after it is created.
          
       2.Equality
          We can use the equals() method for comparing two strings in Java since the String class overrides the equals() method 
          of the Object class, while StringBuilder doesnâ€™t override the equals() method of the Object class and hence equals() method
          cannot be used to compare two StringBuilder objects.  
          
       3. Constructor
          We can create a String object without using a new operator, which is not possible with a StringBuilder.  
          
          
       Five String Methods with Example-
       
       1.
         String myStr = "Hello";
         char result = myStr.charAt(0);
         System.out.println(result);       //H   
         
       2.
          String myStr1 = "Hello";
          String myStr2 = "Hello";
          System.out.println(myStr1.compareTo(myStr2)); // Returns 0 because they are equal    
          
       3.
         String firstName = "Deepak ";
         String lastName = "Kumar";
         System.out.println(firstName.concat(lastName));  // Deepak Kumar
         
       4.
         String myStr1 = "Hello";
         String myStr2 = "Hello";
         System.out.println(myStr1.equals(myStr2)); // Returns true because they are equal   
         
       5.
         String myStr1 = "Hello";
         String myStr2 = "HELLO";
         System.out.println(myStr1.equalsIgnoreCase(myStr2)); // true  
          
          
          
Answer-(b)-What is the difference between equals method and == operator in java? 
           
             The difference between the == operator and .equals() method is that one is an operator, and the other is the method. 
             Both these == operators and equals() are used to compare objects to mark equality.
             
             == is an operator that compares the memory or reference location of an object in the heap of the RAM.
             
            .equal() is a method that compares the actual content of the object.
          
          
            Output for the Snippet-
            1.
            String s1 = new String("abc");
            String s2 = new String("abc");
            System.out.println(s1.equals(s2)); // true because content is equal
          
            2.
            StringBuilder sb1 = new StringBuilder("abc");
            StringBuilder sb2 = new StringBuilder("abc");
            System.out.println(sb1.equals(sb2));          // false because object is different.
            
            3.
            
            String s1 = new String("abc");
            String s2 = new String("abc");
            System.out.println(s1==s2);        // false because object is different.
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          